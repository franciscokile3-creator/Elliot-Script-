--// ðŸ§  ELLIOT AIM ASSIST (Forsaken Edition)
-- Works with killers (NPCs), smooth camera aim, no animation trigger needed

--// Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

--// Variables
local LocalPlayer = Players.LocalPlayer
local aimAssistEnabled = false
local aimAssistSmoothness = 0.2
local minKillerHealth = 300 -- minimum HP to count as a killer
local maxAimAngle = 20 -- max degrees to target
local configFolder = "ElliotAimAssistConfig"
local configFile = "Settings"

--// Load Rayfield UI
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

--// UI Setup
local Window = Rayfield:CreateWindow({
	Name = "Elliot Aim Assist",
	LoadingTitle = "Elliot Aim System",
	LoadingSubtitle = "by 007n7",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = configFolder,
		FileName = configFile
	}
})

local Tab = Window:CreateTab("Settings", 4483362458)

--// UI Controls
Tab:CreateToggle({
	Name = "Enable Aim Assist",
	CurrentValue = aimAssistEnabled,
	Callback = function(state)
		aimAssistEnabled = state
		print("Aim Assist:", state)
	end
})

Tab:CreateSlider({
	Name = "Smoothness",
	Range = {0, 1},
	Increment = 0.01,
	CurrentValue = aimAssistSmoothness,
	Callback = function(value)
		aimAssistSmoothness = value
		print("Smoothness set to:", value)
	end
})

Tab:CreateButton({
	Name = "Load c00lgui",
	Callback = function()
		local success, err = pcall(function()
			loadstring(game:HttpGet("https://rawscripts.net/raw/Forsaken-c00lgui-v15-ESP-EDITABLE-STAMINA-41624"))()
		end)
		if success then
			print("c00lgui loaded successfully")
		else
			warn("Failed to load c00lgui:", err)
		end
	end
})

--// Functions

-- Detect all killers / enemies in workspace
local function GetKillers()
	local enemies = {}
	for _, obj in pairs(Workspace:GetChildren()) do
		if obj:FindFirstChild("Humanoid") and obj:FindFirstChild("HumanoidRootPart") then
			local hum = obj.Humanoid
			if hum.Health > 0 and hum.MaxHealth >= minKillerHealth then
				table.insert(enemies, {
					HP = hum.Health,
					Root = obj.HumanoidRootPart,
					Character = obj
				})
			end
		end
	end
	return enemies
end

-- Check visibility (line of sight)
local function HasLineOfSight(origin, targetPos, target)
	local params = RaycastParams.new()
	params.FilterDescendantsInstances = {LocalPlayer.Character}
	params.FilterType = Enum.RaycastFilterType.Blacklist
	params.IgnoreWater = true

	local result = Workspace:Raycast(origin, (targetPos - origin), params)
	if result then
		return result.Instance:IsDescendantOf(target)
	end
	return true
end

--// Aim Assist Loop
RunService.RenderStepped:Connect(function()
	if not aimAssistEnabled then return end

	local character = LocalPlayer.Character
	if not character or not character:FindFirstChild("HumanoidRootPart") then return end

	local camera = Workspace.CurrentCamera
	camera.CameraType = Enum.CameraType.Custom
	local camPos = camera.CFrame.Position
	local camDir = camera.CFrame.LookVector

	local enemies = GetKillers()
	local bestTarget = nil
	local closestAngle = maxAimAngle

	for _, enemy in pairs(enemies) do
		local targetPos = enemy.Root.Position
		local dirToTarget = (targetPos - camPos).Unit
		local dot = camDir:Dot(dirToTarget)
		local angle = math.deg(math.acos(math.clamp(dot, -1, 1)))

		if angle < closestAngle and HasLineOfSight(camPos, targetPos, enemy.Character) then
			closestAngle = angle
			bestTarget = enemy
		end
	end

	if bestTarget then
		local newDir = camDir:Lerp((bestTarget.Root.Position - camPos).Unit, aimAssistSmoothness)
		camera.CFrame = CFrame.new(camPos, camPos + newDir)
	end
end)
