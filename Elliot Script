--// Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera

--// Variables
local LocalPlayer = Players.LocalPlayer
local aimAssistEnabled = false
local animationActive = false
local aimAssistSmoothness = 0.2
local minHP, maxHP = 131, 100000
local animationID = "rbxassetid://114155003741146"

--// Rayfield UI
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

local Window = Rayfield:CreateWindow({
    Name = "Elliot Aim Assist | Forsaken",
    LoadingTitle = "Elliot System",
    LoadingSubtitle = "by 007n7",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "ElliotAA",
        FileName = "AimAssist"
    },
})

local Tab = Window:CreateTab("Main", 4483362458)

local Toggle = Tab:CreateToggle({
    Name = "Enable Aim Assist",
    CurrentValue = false,
    Flag = "aimAssistEnabled",
    Callback = function(Value)
        aimAssistEnabled = Value
    end,
})

local Slider = Tab:CreateSlider({
    Name = "Smoothness",
    Range = {0.05, 1},
    Increment = 0.05,
    Suffix = "",
    CurrentValue = 0.2,
    Flag = "Smoothness",
    Callback = function(Value)
        aimAssistSmoothness = Value
    end,
})

--// Tracer line
local tracer = Drawing.new("Line")
tracer.Visible = false
tracer.Color = Color3.fromRGB(0, 170, 255)
tracer.Thickness = 2

--// Find nearest valid enemy
local function getNearestEnemy()
    local nearest = nil
    local shortestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local humanoid = player.Character:FindFirstChild("Humanoid")
            local hrp = player.Character:FindFirstChild("HumanoidRootPart")

            if humanoid and hrp then
                local hp = humanoid.Health
                if hp >= minHP and hp <= maxHP then
                    local distance = (hrp.Position - Camera.CFrame.Position).Magnitude
                    if distance < shortestDistance then
                        shortestDistance = distance
                        nearest = hrp
                    end
                end
            end
        end
    end

    return nearest
end

--// Detect local player animation
local function trackAnimations()
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = char:WaitForChild("Humanoid")

    humanoid.AnimationPlayed:Connect(function(animTrack)
        if animTrack.Animation and animTrack.Animation.AnimationId == animationID then
            animationActive = true

            -- When animation stops
            animTrack.Stopped:Connect(function()
                animationActive = false
            end)
        end
    end)
end

-- Start tracking
trackAnimations()

--// Aim Assist + Tracer
RunService.RenderStepped:Connect(function()
    if aimAssistEnabled and animationActive then
        local target = getNearestEnemy()
        if target then
            -- Aim at torso
            local cameraCFrame = Camera.CFrame
            local direction = (target.Position - cameraCFrame.Position).Unit
            local newCFrame = CFrame.new(cameraCFrame.Position, cameraCFrame.Position + direction)
            Camera.CFrame = cameraCFrame:Lerp(newCFrame, aimAssistSmoothness)

            -- Tracer line
            local targetPos, onScreen = Camera:WorldToViewportPoint(target.Position)
            if onScreen then
                tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                tracer.To = Vector2.new(targetPos.X, targetPos.Y)
                tracer.Visible = true
            else
                tracer.Visible = false
            end
        else
            tracer.Visible = false
        end
    else
        tracer.Visible = false
    end
end)
